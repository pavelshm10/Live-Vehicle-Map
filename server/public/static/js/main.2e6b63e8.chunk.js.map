{"version":3,"sources":["Components/Map/CustomMap.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["GoogleApiWrapper","apiKey","google","ref","useRef","useState","lat","lng","center","path","setPath","map","setMap","zoom","polygonRef","setPolygonRef","setLoading","setError","response","setResponse","allVehicles","setAllVehicles","markers","setMarkers","selected","setSelected","getData","url","method","flag","fetch","headers","mode","body","JSON","stringify","then","ok","json","Error","catch","err","console","log","message","useEffect","polygon","maps","Polygon","paths","strokePosition","StrokePosition","CENTER","strokeWeight","fillOpacity","current","window","Map","resetDiv","document","createElement","controlDiv","controlUI","style","backgroundColor","border","borderRadius","boxShadow","cursor","marginTop","marginBottom","textAlign","appendChild","controlText","color","fontFamily","fontSize","lineHeight","paddingLeft","paddingRight","innerHTML","addEventListener","i","length","Reset","controls","ControlPosition","TOP_CENTER","push","fontWeight","containerStyle","position","width","height","zoomControl","streetViewControl","fullscreenControl","mapTypeControl","initialCenter","disableDefaultUI","onClick","t","coord","latLng","marker","location","label","id","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e6b63e8.chunk.js","sourcesContent":["import { Map, Marker, GoogleApiWrapper, Polygon, InfoWindow } from \"google-maps-react\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\nfunction CustomMap({ google }: any) {\r\n\tconst ref = useRef<HTMLDivElement>(null);\r\n\tconst [center, setCenter] = useState({\r\n\t\tlat: 51.4694976807,\r\n\t\tlng: -0.0493916683,\r\n\t});\r\n\tvar [path, setPath] = useState<any[]>([]);\r\n\tvar [map, setMap] = useState<google.maps.Map>();\r\n\tconst [zoom, setZoom] = useState(13);\r\n\tconst [polygonRef, setPolygonRef] = useState<any>(null);\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [error, setError] = useState(null);\r\n\tconst [response, setResponse] = useState<any[]>([]);\r\n    const [allVehicles, setAllVehicles] = useState<any[]>([]);\r\n\tlet [markers, setMarkers] = useState<google.maps.Marker[]>([]);\r\n    const [selected, setSelected]= useState<any>(true);\r\n    useEffect(() => {\r\n        getData(\"/AllIdsBy\", \"POST\",true);\r\n\t}, []);\r\n\r\n\tconst onClick = (t: any, map: any, coord: any) => {\r\n\t\tconst { latLng } = coord;\r\n\t\tconst lat = latLng.lat();\r\n\t\tconst lng = latLng.lng();\r\n\t\tpath.push({\r\n\t\t\tlat: lat,\r\n\t\t\tlng: lng,\r\n\t\t});\r\n\t\tpolygonRef?.setMap(null);\r\n\t\tconst polygon = new google.maps.Polygon({\r\n\t\t\tpaths: path,\r\n\t\t\tstrokePosition: google.maps.StrokePosition.CENTER,\r\n\t\t\tstrokeWeight: 1,\r\n\t\t\tfillOpacity: 0.0,\r\n\t\t});\r\n\t\tsetPolygonRef(polygon);\r\n\t\tpolygon.setMap(map);\r\n\t\tsetMap(map);\r\n\t\tif (path.length > 2) {\r\n\t\t\tgetData(\"/IdsByPolygon\", \"POST\",false);\r\n\t\t}\r\n\t};\r\n\r\n\tfunction getData(url: string, method: string,flag:boolean) {\r\n        fetch(url, {\r\n\t\t\tmethod: method,\r\n\t\t\theaders: {\r\n\t\t\t\t\"Accept\": \"application/json\",\r\n\t\t\t\t\"Content-type\": \"application/json\",\r\n\t\t\t},\r\n\t\t\tmode: \"cors\",\r\n\t\t\tbody: JSON.stringify({ path: path }),\r\n\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow Error(\"could not fetch the data for that resource\");\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((response: any) => {\r\n\t\t\t\tsetSelected(flag);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tsetError(null);\r\n                if(flag){\r\n                    setAllVehicles(response); \r\n                } \r\n                setMarkers([]);\r\n                setResponse(response);\r\n\t\t\t})\r\n\t\t\t.catch((err: any) => {\r\n\t\t\t\tconsole.log(err.message);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tsetError(err.message);\r\n\t\t\t});\r\n\t}\r\n\r\n\tfunction Reset(controlDiv: Element, map: any) {\r\n\t\t// Set CSS for the control border.\r\n        const controlUI = document.createElement(\"div\");\r\n\t\tcontrolUI.style.backgroundColor = \"#fff\";\r\n\t\tcontrolUI.style.border = \"2px solid #fff\";\r\n\t\tcontrolUI.style.borderRadius = \"3px\";\r\n\t\tcontrolUI.style.boxShadow = \"0 2px 6px rgba(0,0,0,.3)\";\r\n\t\tcontrolUI.style.cursor = \"pointer\";\r\n\t\tcontrolUI.style.marginTop = \"8px\";\r\n\t\tcontrolUI.style.marginBottom = \"22px\";\r\n\t\tcontrolUI.style.textAlign = \"center\";\r\n\t\tcontrolDiv.appendChild(controlUI);\r\n\r\n\t\t// Set CSS for the control interior.\r\n\t\tconst controlText = document.createElement(\"div\");\r\n\t\tcontrolText.style.color = \"rgb(25,25,25)\";\r\n\t\tcontrolText.style.fontFamily = \"Roboto,Arial,sans-serif\";\r\n\t\tcontrolText.style.fontSize = \"16px\";\r\n\t\tcontrolText.style.lineHeight = \"38px\";\r\n\t\tcontrolText.style.paddingLeft = \"5px\";\r\n\t\tcontrolText.style.paddingRight = \"5px\";\r\n\t\tcontrolText.innerHTML = \"Reset Map\";\r\n\t\tcontrolUI.appendChild(controlText);\r\n\r\n\t\t// Setup the click event listeners: simply set the map to Chicago.\r\n\t\tcontrolUI.addEventListener(\"click\", () => {\r\n            setSelected(true);\r\n            for (let i = 0; i < markers.length; i++) {\r\n\t\t\t\tmarkers[i].setMap(null);\r\n\t\t\t}\r\n\t\t\tsetPath([]);\r\n            setMarkers([]);\r\n            setResponse(allVehicles);\r\n\t\t});\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tpolygonRef?.setMap(null);\r\n\t\tconst polygon = new google.maps.Polygon({\r\n\t\t\tpaths: path,\r\n\t\t\tstrokePosition: google.maps.StrokePosition.CENTER,\r\n\t\t\tstrokeWeight: 1,\r\n\t\t\tfillOpacity: 0.0,\r\n\t\t});\r\n\t\tsetPolygonRef(polygon);\r\n\t\tpolygon.setMap(map);\r\n\t\tsetMap(map);\r\n\t}, [path]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (ref.current && !map) {\r\n\t\t\tsetMap(new window.google.maps.Map(ref.current, {}));\r\n\t\t}\r\n\t\tif (map) {\r\n            const resetDiv = document.createElement(\"div\");\r\n\t\t\tsetMap(map);\r\n\t\t\tReset(resetDiv, map);\r\n\t\t\tmap.controls[google.maps.ControlPosition.TOP_CENTER].push(resetDiv);\r\n\t\t}\r\n\t}, [ref, map]);\r\n\r\n\treturn (\r\n\t\t<div style={{ fontWeight: \"bold\" }}>\r\n\t\t\tChoose Coordinates...\r\n\t\t\t<Map\r\n\t\t\t\tgoogle={google}\r\n\t\t\t\tcontainerStyle={{\r\n\t\t\t\t\tposition: \"static\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t}}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\theight: \"90%\",\r\n\t\t\t\t\tmarginTop: \"60px\",\r\n\t\t\t\t}}\r\n\t\t\t\tzoomControl={true}\r\n\t\t\t\tstreetViewControl={true}\r\n\t\t\t\tfullscreenControl={true}\r\n\t\t\t\tmapTypeControl={true}\r\n\t\t\t\tcenter={center}\r\n\t\t\t\tinitialCenter={center}\r\n\t\t\t\tzoom={zoom}\r\n\t\t\t\tdisableDefaultUI={true}\r\n\t\t\t\tonClick={onClick}\r\n\t\t\t>\r\n\t\t\t\t{response.map((marker) => (\r\n                    selected ?\r\n                    <Marker\r\n\t\t\t\t\t    position= {{lat:marker.location.lat,lng:marker.location.lng}}\r\n\t\t\t\t\t></Marker> :\r\n                    <Marker\r\n                    position= {{lat:marker.location.lat,lng:marker.location.lng}}\r\n                    label= {marker.id}\r\n                    ></Marker>    \r\n                ))}\r\n\t\t\t</Map>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n\tapiKey: \"AIzaSyDenVRxkWO6OP8EC_GFtMM86YcHYRnyaek\",\r\n})(CustomMap);\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport CustomMap from \"./Components/Map/CustomMap\";\n\nfunction App() {\n\tconst [loading, setLoading] = useState(true);\n\tconst [error, setError] = useState(null);\n  \tconst [locations, setLocations] = useState<any[]>([]);\n\t// useEffect(() => {\n\t\t// setTimeout(() => {\n\t\t\t// fetch(\"/allIds\")\n\t\t\t// \t.then((response) => {\n          \t// \tif (response.ok) {\n\t\t\t// \t\treturn response.json();\n\t\t\t// \t\t\t} else {\n\t\t\t// \t\t\t\tthrow Error(\"could not fetch the data for that resource\");\n\t\t\t// \t\t\t}\n\t\t\t// \t})\n\t\t\t// \t.then((response: any) => {\n          \t// \t\tconsole.log(\"in\");\n\t\t\t// \t\tsetLocations(response);\n\t\t\t// \t\tsetLoading(false);\n\t\t\t// \t\tsetError(null);\n\t\t\t// \t})\n\t\t\t// \t.catch((err: any) => {\n\t\t\t// \t\tconsole.log(err.message);\n\t\t\t// \t\tsetLoading(false);\n\t\t\t// \t\tsetError(err.message);\n\t\t\t// \t});\n\t\t// }, 1000);\n\t// });\n\n\treturn (\n\t<div className=\"App\" style={{ width: 300, height: 300 }}>\n      <CustomMap/>\n    </div>\n)};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}